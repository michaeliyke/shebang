#!/usr/bin/env bash

# Sets the remote a git repo.
# It runs git remote -v and parses the output to get the repo url
# This url is then reconstructed with the auth token included
# If $1 is provided, it is used instead with errors if its invalid
# If $1 is unset and and the command could not obtain a valid url
# -- If it is no a valid git repo, indicates
# -- If it's indeed a valid repo but the remote url isn't set, indicates
# Anything else goes into the reconstruction provided it is a string

# #################################################################################
# git remote remove origin  # Remove the origin remote tracking                   #
# git remote add --fetch --tags --master master origin https://name:SHA-1@repo.git#
###################################################################################
# -m|--master: sets the master branch explicitely                                 #
# -f|--fetch: run git fetch <name> immediately                                     #
# To create and update remote-tracking branches <name>/<branch>                    #
# --tags: git fetch <name> imports every tag from the remote repository.           #
# --no-tags: git fetch <name> does not import tags from the remote repo            #
####################################################################################

# clear

# The gt token from parsing a command output
function gt_token()
{
	while IFS= read -r cmd
		do
			cmd="${cmd##+(' ')}" # Trim white spaces left
			match="${cmd:0:1}" # Select the first character
			result="" # Initialize result
			# If cmd is not a comment, run it as a command, assign output to result
			if [ ! "$match" = "#" ]; then result=$($cmd); fi

			# If result contains a value, and the first 4 chars are ghp_
			if [ -n "$result" ] && [ "${result:0:4}" = "ghp_" ]
					then
					# Trim off trailing comment and or space from result
					result="${result%' '\#*}"
					echo "$result" # ouput result and quit
					return 0
			fi
	done < "$HOME/bin/git/git_tokens"
}

s="$1" # The first argument is a git repository url

# If not useful information is provided, quit
if [ -n "$s" ] || [ "${#s}" -lt 20 ];
then
	echo "No useful information provided"
	echo "Exiting . ."
	exit 1
fi

# s="https://michaeliyke:ghp_tId4nvZ2u@github.com/michaeliyke/shbg.git"
# Trim off everything before the github.com inclusive
# By replacing it with --github.com
x="${s/https:\/\/*github.com/--github.com}" # --github.com/michaeliyke/shbg.git

# get the username by replacing the same match above with empty
# This time we match upt to the / after github.com to reveal the user name
user="${s/https:\/\/*github.com\//}"
# Remove everything after the next / from the last command
# This leaves only the username
user="${user%/*}"

# get the git token from a parser function
token=$(gt_token)
rmt="https://$user:$token@${x/--/}"

echo "$rmt"
